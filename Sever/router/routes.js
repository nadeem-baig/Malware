const express = require("express");
const userModel = require("../models/models");
const ContactsModel = require("../models/contactsmodel");
const DateModel = require("../models/timemodel");
const mongoose = require("mongoose");
const UserSchema = new mongoose.Schema({
  dateTime     : { type : String , unique : true, required : true, dropDups: true },
  deviceid : { type:  String  },
  devicename : { type:  String  },
});

const User = mongoose.model("Devices", UserSchema);

const app = express();
app.post("/add_records", async (request, response) => {

  try {
    await userModel.insertMany(request.body);
    response.send(200);
  } catch (error) {
    response.status(500).send(error);
  }
});
app.post("/add_contacts", async (request, response) => {
  var currentdate = new Date();
  var datetime = "Last Sync: " + currentdate.getDate() + "/"
    + (currentdate.getMonth() + 1) + "/"
    + currentdate.getFullYear() + " @ "
    + currentdate.getHours() + ":"
    + currentdate.getMinutes() + ":"
    + currentdate.getSeconds();
  console.log('time', datetime);

  try {
    await ContactsModel.insertMany(request.body);
    response.send(200);
  } catch (error) {
    response.status(500).send(error);
  }


});

app.post("/Updatetime", async (request, response) => {
  var currentdate = new Date();
  var datetime = "Last Sync: " + currentdate.getDate() + "/"
    + (currentdate.getMonth() + 1) + "/"
    + currentdate.getFullYear() + " @ "
    + currentdate.getHours() + ":"
    + currentdate.getMinutes() + ":"
    + currentdate.getSeconds();
  try {
    await DateModel.insertMany({dateTime:datetime});
    response.send(200);
  } catch (error) {
    response.status(500).send(error);
  }


});
app.post("/instelleddevices", async (request, response) => {


  var currentdate = new Date();
  var datetime = "Last Sync: " + currentdate.getDate() + "/"
    + (currentdate.getMonth() + 1) + "/"
    + currentdate.getFullYear() + " @ "
    + currentdate.getHours() + ":"
    + currentdate.getMinutes() + ":"
    + currentdate.getSeconds();
  try {
    await User.insertMany({dateTime:datetime,deviceid:request.body.deviceid,devicename:request.body.devicename});
    response.send(200);
  } catch (error) {
    response.status(500).send(error);
  }


});

app.get("/calllogs", async (request, response) => {

  userModel.find({}, function(err, users) {
    var userMap = {};

    users.forEach(function(user) {
      userMap[user._id] = user;
    });

    response.send(userMap);  
  });

});

app.get("/conatcts", async (request, response) => {
  ContactsModel.find({}, function(err, users) {
    var userMap = {};

    users.forEach(function(user) {
      userMap[user._id] = user;
    });

    response.send(userMap);  
  });

});

app.get("/", async (request, response) => {
  response.send("welcome");  
});

app.get('/download', function(req, res){
  const file = `spandhana.apk`;
  res.download(file); // Set disposition and send it.
});

module.exports = app;
